// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener-extensions/pkg/gardener/terraformer (interfaces: Terraformer)

// Package terraformer is a generated GoMock package.
package terraformer

import (
	terraformer "github.com/gardener/gardener-extensions/pkg/gardener/terraformer"
	terraformer0 "github.com/gardener/gardener/pkg/operation/terraformer"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTerraformer is a mock of Terraformer interface
type MockTerraformer struct {
	ctrl     *gomock.Controller
	recorder *MockTerraformerMockRecorder
}

// MockTerraformerMockRecorder is the mock recorder for MockTerraformer
type MockTerraformerMockRecorder struct {
	mock *MockTerraformer
}

// NewMockTerraformer creates a new mock instance
func NewMockTerraformer(ctrl *gomock.Controller) *MockTerraformer {
	mock := &MockTerraformer{ctrl: ctrl}
	mock.recorder = &MockTerraformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTerraformer) EXPECT() *MockTerraformerMockRecorder {
	return m.recorder
}

// Apply mocks base method
func (m *MockTerraformer) Apply() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply")
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply
func (mr *MockTerraformerMockRecorder) Apply() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockTerraformer)(nil).Apply))
}

// ConfigExists mocks base method
func (m *MockTerraformer) ConfigExists() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigExists")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigExists indicates an expected call of ConfigExists
func (mr *MockTerraformerMockRecorder) ConfigExists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigExists", reflect.TypeOf((*MockTerraformer)(nil).ConfigExists))
}

// Destroy mocks base method
func (m *MockTerraformer) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy
func (mr *MockTerraformerMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockTerraformer)(nil).Destroy))
}

// GetStateOutputVariables mocks base method
func (m *MockTerraformer) GetStateOutputVariables(arg0 ...string) (map[string]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStateOutputVariables", varargs...)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateOutputVariables indicates an expected call of GetStateOutputVariables
func (mr *MockTerraformerMockRecorder) GetStateOutputVariables(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateOutputVariables", reflect.TypeOf((*MockTerraformer)(nil).GetStateOutputVariables), arg0...)
}

// InitializeWith mocks base method
func (m *MockTerraformer) InitializeWith(arg0 terraformer0.Initializer) terraformer.Terraformer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeWith", arg0)
	ret0, _ := ret[0].(terraformer.Terraformer)
	return ret0
}

// InitializeWith indicates an expected call of InitializeWith
func (mr *MockTerraformerMockRecorder) InitializeWith(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeWith", reflect.TypeOf((*MockTerraformer)(nil).InitializeWith), arg0)
}

// SetVariablesEnvironment mocks base method
func (m *MockTerraformer) SetVariablesEnvironment(arg0 map[string]string) terraformer.Terraformer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVariablesEnvironment", arg0)
	ret0, _ := ret[0].(terraformer.Terraformer)
	return ret0
}

// SetVariablesEnvironment indicates an expected call of SetVariablesEnvironment
func (mr *MockTerraformerMockRecorder) SetVariablesEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVariablesEnvironment", reflect.TypeOf((*MockTerraformer)(nil).SetVariablesEnvironment), arg0)
}
