// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener-extensions/controllers/provider-gcp/pkg/internal/mock/infrastructure (interfaces: NewGCPClientFromServiceAccount,NewTerraformer,CleanupKubernetesCloudArtifacts,TerraformerDefaultInitializer,TerraformerInitializer)

// Package infrastructure is a generated GoMock package.
package infrastructure

import (
	context "context"
	internal "github.com/gardener/gardener-extensions/controllers/provider-gcp/pkg/internal"
	client "github.com/gardener/gardener-extensions/controllers/provider-gcp/pkg/internal/client"
	terraformer "github.com/gardener/gardener-extensions/pkg/gardener/terraformer"
	terraformer0 "github.com/gardener/gardener/pkg/operation/terraformer"
	gomock "github.com/golang/mock/gomock"
	rest "k8s.io/client-go/rest"
	reflect "reflect"
	client0 "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockNewGCPClientFromServiceAccount is a mock of NewGCPClientFromServiceAccount interface
type MockNewGCPClientFromServiceAccount struct {
	ctrl     *gomock.Controller
	recorder *MockNewGCPClientFromServiceAccountMockRecorder
}

// MockNewGCPClientFromServiceAccountMockRecorder is the mock recorder for MockNewGCPClientFromServiceAccount
type MockNewGCPClientFromServiceAccountMockRecorder struct {
	mock *MockNewGCPClientFromServiceAccount
}

// NewMockNewGCPClientFromServiceAccount creates a new mock instance
func NewMockNewGCPClientFromServiceAccount(ctrl *gomock.Controller) *MockNewGCPClientFromServiceAccount {
	mock := &MockNewGCPClientFromServiceAccount{ctrl: ctrl}
	mock.recorder = &MockNewGCPClientFromServiceAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNewGCPClientFromServiceAccount) EXPECT() *MockNewGCPClientFromServiceAccountMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockNewGCPClientFromServiceAccount) Do(arg0 context.Context, arg1 []byte) (client.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(client.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockNewGCPClientFromServiceAccountMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockNewGCPClientFromServiceAccount)(nil).Do), arg0, arg1)
}

// MockNewTerraformer is a mock of NewTerraformer interface
type MockNewTerraformer struct {
	ctrl     *gomock.Controller
	recorder *MockNewTerraformerMockRecorder
}

// MockNewTerraformerMockRecorder is the mock recorder for MockNewTerraformer
type MockNewTerraformerMockRecorder struct {
	mock *MockNewTerraformer
}

// NewMockNewTerraformer creates a new mock instance
func NewMockNewTerraformer(ctrl *gomock.Controller) *MockNewTerraformer {
	mock := &MockNewTerraformer{ctrl: ctrl}
	mock.recorder = &MockNewTerraformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNewTerraformer) EXPECT() *MockNewTerraformerMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockNewTerraformer) Do(arg0 *rest.Config, arg1 *internal.ServiceAccount, arg2, arg3, arg4 string) (terraformer.Terraformer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(terraformer.Terraformer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockNewTerraformerMockRecorder) Do(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockNewTerraformer)(nil).Do), arg0, arg1, arg2, arg3, arg4)
}

// MockCleanupKubernetesCloudArtifacts is a mock of CleanupKubernetesCloudArtifacts interface
type MockCleanupKubernetesCloudArtifacts struct {
	ctrl     *gomock.Controller
	recorder *MockCleanupKubernetesCloudArtifactsMockRecorder
}

// MockCleanupKubernetesCloudArtifactsMockRecorder is the mock recorder for MockCleanupKubernetesCloudArtifacts
type MockCleanupKubernetesCloudArtifactsMockRecorder struct {
	mock *MockCleanupKubernetesCloudArtifacts
}

// NewMockCleanupKubernetesCloudArtifacts creates a new mock instance
func NewMockCleanupKubernetesCloudArtifacts(ctrl *gomock.Controller) *MockCleanupKubernetesCloudArtifacts {
	mock := &MockCleanupKubernetesCloudArtifacts{ctrl: ctrl}
	mock.recorder = &MockCleanupKubernetesCloudArtifactsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCleanupKubernetesCloudArtifacts) EXPECT() *MockCleanupKubernetesCloudArtifactsMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockCleanupKubernetesCloudArtifacts) Do(arg0 context.Context, arg1 client.Interface, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do
func (mr *MockCleanupKubernetesCloudArtifactsMockRecorder) Do(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockCleanupKubernetesCloudArtifacts)(nil).Do), arg0, arg1, arg2, arg3)
}

// MockTerraformerDefaultInitializer is a mock of TerraformerDefaultInitializer interface
type MockTerraformerDefaultInitializer struct {
	ctrl     *gomock.Controller
	recorder *MockTerraformerDefaultInitializerMockRecorder
}

// MockTerraformerDefaultInitializerMockRecorder is the mock recorder for MockTerraformerDefaultInitializer
type MockTerraformerDefaultInitializerMockRecorder struct {
	mock *MockTerraformerDefaultInitializer
}

// NewMockTerraformerDefaultInitializer creates a new mock instance
func NewMockTerraformerDefaultInitializer(ctrl *gomock.Controller) *MockTerraformerDefaultInitializer {
	mock := &MockTerraformerDefaultInitializer{ctrl: ctrl}
	mock.recorder = &MockTerraformerDefaultInitializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTerraformerDefaultInitializer) EXPECT() *MockTerraformerDefaultInitializerMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockTerraformerDefaultInitializer) Do(arg0 client0.Client, arg1, arg2 string, arg3 []byte) terraformer0.Initializer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(terraformer0.Initializer)
	return ret0
}

// Do indicates an expected call of Do
func (mr *MockTerraformerDefaultInitializerMockRecorder) Do(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockTerraformerDefaultInitializer)(nil).Do), arg0, arg1, arg2, arg3)
}

// MockTerraformerInitializer is a mock of TerraformerInitializer interface
type MockTerraformerInitializer struct {
	ctrl     *gomock.Controller
	recorder *MockTerraformerInitializerMockRecorder
}

// MockTerraformerInitializerMockRecorder is the mock recorder for MockTerraformerInitializer
type MockTerraformerInitializerMockRecorder struct {
	mock *MockTerraformerInitializer
}

// NewMockTerraformerInitializer creates a new mock instance
func NewMockTerraformerInitializer(ctrl *gomock.Controller) *MockTerraformerInitializer {
	mock := &MockTerraformerInitializer{ctrl: ctrl}
	mock.recorder = &MockTerraformerInitializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTerraformerInitializer) EXPECT() *MockTerraformerInitializerMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockTerraformerInitializer) Do(arg0 *terraformer0.InitializerConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do
func (mr *MockTerraformerInitializerMockRecorder) Do(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockTerraformerInitializer)(nil).Do), arg0)
}
